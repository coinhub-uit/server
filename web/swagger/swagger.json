{"openapi":"3.0.0","paths":{"/":{"get":{"operationId":"RootController_root","parameters":[],"responses":{"200":{"description":""}},"tags":["Root"]}},"/users":{"get":{"description":"Get all users' profile","operationId":"UserController_getAll","parameters":[{"name":"page","required":false,"in":"query","description":"Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ","schema":{"type":"number"}},{"name":"limit","required":false,"in":"query","description":"Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ","schema":{"type":"number"}},{"name":"sortBy","required":false,"in":"query","description":"Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> No default sorting specified, the result order is not guaranteed\n          </p>\n      <h4>Available Fields</h4><ul><li>createdAt</li></ul>\n      ","schema":{"type":"array","items":{"type":"string","enum":["createdAt:ASC","createdAt:DESC"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedDocumented"},{"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/UserEntity"}},"meta":{"properties":{"select":{"type":"array","items":{"type":"string"}},"filter":{"type":"object","properties":{}}}}}}]}}}}},"security":[{"admin":[]}],"summary":"Get all profiles","tags":["User"]},"post":{"description":"Register a profile for existed user in Supabase's auth database. (User only)","operationId":"UserController_create","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserEntity"}}}},"403":{"description":""},"422":{"description":"User already exists, or constraint error"}},"security":[{"admin":[]},{"user":[]}],"summary":"Register profile","tags":["User"]}},"/users/{id}/avatar":{"get":{"description":"Get avatar","operationId":"UserController_getAvatar","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":""},"404":{"description":""},"422":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Get avatar","tags":["User"]},"post":{"description":"Upload avatar and save it to storage","operationId":"UserController_uploadAvatar","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"description":"Avatar file","content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/AvatarUploadDto"}}}},"responses":{"201":{"description":""},"400":{"description":"File may be unsupported"},"404":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Upload avatar","tags":["User"]},"delete":{"description":"Delete avatar for a user, clean in storage if stored in storage","operationId":"UserController_deleteAvatar","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":""},"403":{"description":""},"404":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Delete avatar","tags":["User"]}},"/users/{id}":{"get":{"description":"Get user profile by ID","operationId":"UserController_getById","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserEntity"}}}},"403":{"description":""},"404":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Get profile","tags":["User"]},"put":{"description":"Update user's profile, need to send all properties.","operationId":"UserController_update","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserDto"}}}},"responses":{"204":{"description":""},"403":{"description":""},"404":{"description":""},"422":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Update profile","tags":["User"]},"patch":{"description":"Update paritial user's profile","operationId":"UserController_updateParitial","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateParitialUserDto"}}}},"responses":{"200":{"description":""},"403":{"description":""},"404":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Update paritial profile","tags":["User"]},"delete":{"description":"Delete user profile with user id","operationId":"UserController_delete","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"For easier to dev, this is made to not reflect the right flow. If there aren't that user ID to delete, still 200 return"},"403":{"description":""},"422":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Delete profile","tags":["User"]}},"/users/{id}/sources":{"get":{"description":"Get all sources of user with user id","operationId":"UserController_getSources","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SourceEntity"}}}}},"403":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Get sources of user","tags":["User"]}},"/users/{id}/tickets":{"get":{"description":"Get all tickets of user with user id","operationId":"UserController_getTickets","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/TicketEntity"}}}}},"403":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Get tickets of user","tags":["User"]}},"/users/{id}/devices":{"post":{"description":"Register user devices. Currently for FCM - push notification","operationId":"UserController_registerDevice","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegisterDeviceDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceEntity"}}}},"403":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Register user devices (FCM)","tags":["User"]}},"/sources":{"post":{"operationId":"SourceController_createSource","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateSourceDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SourceEntity"}}}},"404":{"description":""}},"security":[{"user":[]}],"summary":"Create source","tags":["Source"]}},"/sources/{id}":{"get":{"operationId":"SourceController_getById","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SourceEntity"}}}}},"404":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Get source","tags":["Source"]},"delete":{"operationId":"SourceController_delete","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"404":{"description":""},"409":{"description":"Source mays still have money"}},"security":[{"admin":[]},{"user":[]}],"summary":"Delete source by id","tags":["Source"]}},"/sources/{id}/tickets":{"get":{"operationId":"SourceController_getTickets","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/TicketEntity"}}}}},"404":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Get all source's tickets","tags":["Source"]}},"/tickets":{"post":{"description":"Create ticket of source in user account","operationId":"TicketController_create","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTicketDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TicketEntity"}}}},"403":{"description":"Cannot create ticket on other user's source"},"404":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"Create ticket","tags":["Ticket"]}},"/tickets/{id}/withdraw":{"get":{"description":"withdraw ticket of source in user account","operationId":"TicketController_withdrawTicket","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":""},"404":{"description":""}},"security":[{"user":[]},{"admin":[]}],"summary":"withdraw ticket","tags":["Ticket"]}},"/tickets/{id}/simulate-mature":{"get":{"operationId":"TicketController_simulateMaturityCircle","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":""},"404":{"description":""}},"security":[{"admin":[]}],"summary":"simulate mature ticket","tags":["Ticket"]}},"/payment/tranfer-money":{"post":{"operationId":"PaymentController_tranferMoney","parameters":[],"responses":{"201":{"description":""}},"tags":["Payment"]}},"/payment/vnpay/create":{"post":{"description":"Generate payment link for VNPay","operationId":"VnpayController_create","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTopUpDto"}}}},"responses":{"200":{"description":"VNPAY payment link","content":{"application/json":{"example":"https://sandbox.vnpayment.vn/paymentv2/vpcpay.html?vnp_Amount=1806000&vnp_Command=pay&vnp_CreateDate=20210801153333&vnp_CurrCode=VND&vnp_IpAddr=127.0.0.1&vnp_Locale=vn&vnp_OrderInfo=Thanh+toan+don+hang+%3A5&vnp_OrderType=other&vnp_ReturnUrl=https%3A%2F%2Fdomainmerchant.vn%2FReturnUrl&vnp_TmnCode=DEMOV210&vnp_TxnRef=5&vnp_Version=2.1.0&vnp_SecureHash=3e0d61a0c0534b2e36680b3f7277743e8784cc4e1d68fa7d276e79c23be7d6318d338b477910a27992f5057bb1582bd44bd82ae8009ffaf6d141219218625c42"}}}},"security":[{"user":[]}],"summary":"Generate payment link","tags":["Vnpay"]}},"/payment/vnpay/vnpay-ipn":{"get":{"description":"This is for VNPay to callback, not for the user / admin.","operationId":"VnpayController_ipnCallback","parameters":[],"responses":{"200":{"description":""}},"summary":"IPN URL for VNPay","tags":["Vnpay"]}},"/plans/available-plans":{"get":{"operationId":"PlanController_getAvailablePlans","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/AvailablePlanView"}}}}}},"security":[{"admin":[]},{"user":[]}],"summary":"Get available plans","tags":["Plan"]}},"/plans/{id}":{"get":{"operationId":"PlanController_getPlan","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}},{"name":"allHistories","required":true,"in":"query","schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/PlanEntity"}}}}},"404":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Get plan by id","tags":["Plan"]}},"/plans/histories/{id}":{"get":{"operationId":"PlanController_getPlanHistory","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/PlanHistoryEntity"}}}}},"404":{"description":""}},"security":[{"admin":[]},{"user":[]}],"summary":"Get plan history by id","tags":["Plan"]}},"/plans/histories":{"post":{"operationId":"PlanController_updateRate","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePlanRateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlanHistoryEntity"}}}},"400":{"description":""}},"security":[{"admin":[]}],"summary":"Update plan rate","tags":["Plan"]}},"/plans":{"get":{"operationId":"PlanController_getAll","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/PlanEntity"}}}}}},"security":[{"admin":[]}],"summary":"Get all plans","tags":["Plan"]}},"/admins":{"get":{"operationId":"AdminController_getAdmins","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/AdminEntity"}}}}}},"security":[{"admin":[]}],"summary":"Get admins","tags":["Admin"]}},"/admins/login":{"post":{"operationId":"AdminController_login","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginAdminDto"}}}},"responses":{"200":{"description":""},"401":{"description":""}},"summary":"Login","tags":["Admin"]}},"/admins/refresh":{"get":{"operationId":"AdminController_refreshToken","parameters":[],"responses":{"200":{"description":""},"401":{"description":""}},"security":[{"admin":[]}],"summary":"Refresh token","tags":["Admin"]}},"/reports/activity":{"get":{"operationId":"ReportController_getActivityReport","parameters":[{"name":"page","required":false,"in":"query","description":"Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ","schema":{"type":"number"}},{"name":"limit","required":false,"in":"query","description":"Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ","schema":{"type":"number"}},{"name":"filter.date","required":false,"in":"query","description":"Filter by date query param.\n          <p>\n             <b>Format: </b> filter.date={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.date=$not:$like:John Doe&filter.date=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.tickets","required":false,"in":"query","description":"Filter by tickets query param.\n          <p>\n             <b>Format: </b> filter.tickets={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.tickets=$not:$like:John Doe&filter.tickets=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.totalPrincipal","required":false,"in":"query","description":"Filter by totalPrincipal query param.\n          <p>\n             <b>Format: </b> filter.totalPrincipal={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.totalPrincipal=$not:$like:John Doe&filter.totalPrincipal=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.users","required":false,"in":"query","description":"Filter by users query param.\n          <p>\n             <b>Format: </b> filter.users={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.users=$not:$like:John Doe&filter.users=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"sortBy","required":false,"in":"query","description":"Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> No default sorting specified, the result order is not guaranteed\n          </p>\n      <h4>Available Fields</h4><ul><li>date</li>\n<li>tickets</li>\n<li>users</li></ul>\n      ","schema":{"type":"array","items":{"type":"string","enum":["date:ASC","date:DESC","tickets:ASC","tickets:DESC","users:ASC","users:DESC"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedDocumented"},{"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ActivityReportEntity"}},"meta":{"properties":{"select":{"type":"array","items":{"type":"string"}},"filter":{"type":"object","properties":{"date":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"tickets":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"totalPrincipal":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"users":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]}}}}}}}]}}}}},"security":[{"admin":[]}],"tags":["Report"]}},"/reports/revenue":{"get":{"operationId":"ReportController_getRevenueReport","parameters":[{"name":"page","required":false,"in":"query","description":"Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ","schema":{"type":"number"}},{"name":"limit","required":false,"in":"query","description":"Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ","schema":{"type":"number"}},{"name":"filter.date","required":false,"in":"query","description":"Filter by date query param.\n          <p>\n             <b>Format: </b> filter.date={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.date=$not:$like:John Doe&filter.date=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.days","required":false,"in":"query","description":"Filter by days query param.\n          <p>\n             <b>Format: </b> filter.days={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.days=$not:$like:John Doe&filter.days=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"sortBy","required":false,"in":"query","description":"Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> No default sorting specified, the result order is not guaranteed\n          </p>\n      <h4>Available Fields</h4><ul><li>date</li>\n<li>days</li></ul>\n      ","schema":{"type":"array","items":{"type":"string","enum":["date:ASC","date:DESC","days:ASC","days:DESC"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedDocumented"},{"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/RevenueReportEntity"}},"meta":{"properties":{"select":{"type":"array","items":{"type":"string"}},"filter":{"type":"object","properties":{"date":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"days":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]}}}}}}}]}}}}},"security":[{"admin":[]}],"tags":["Report"]}},"/reports/ticket":{"get":{"operationId":"ReportController_getTicketReport","parameters":[{"name":"page","required":false,"in":"query","description":"Page number to retrieve.If you provide invalid value the default page number will applied\n        <p>\n             <b>Example: </b> 1\n          </p>\n        <p>\n             <b>Default Value: </b> 1\n          </p>\n        ","schema":{"type":"number"}},{"name":"limit","required":false,"in":"query","description":"Number of records per page.\n      <p>\n             <b>Example: </b> 20\n          </p>\n      <p>\n             <b>Default Value: </b> 20\n          </p>\n      <p>\n             <b>Max Value: </b> 100\n          </p>\n\n      If provided value is greater than max value, max value will be applied.\n      ","schema":{"type":"number"}},{"name":"filter.date","required":false,"in":"query","description":"Filter by date query param.\n          <p>\n             <b>Format: </b> filter.date={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.date=$not:$like:John Doe&filter.date=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.days","required":false,"in":"query","description":"Filter by days query param.\n          <p>\n             <b>Format: </b> filter.days={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.days=$not:$like:John Doe&filter.days=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.openedCount","required":false,"in":"query","description":"Filter by openedCount query param.\n          <p>\n             <b>Format: </b> filter.openedCount={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.openedCount=$not:$like:John Doe&filter.openedCount=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"filter.closedCount","required":false,"in":"query","description":"Filter by closedCount query param.\n          <p>\n             <b>Format: </b> filter.closedCount={$not}:OPERATION:VALUE\n          </p>\n          <p>\n             <b>Example: </b> filter.closedCount=$not:$like:John Doe&filter.closedCount=like:John\n          </p>\n          <h4>Available Operations</h4><ul><li>$and</li>\n<li>$or</li>\n<li>$not</li>\n<li>$eq</li>\n<li>$gt</li>\n<li>$gte</li>\n<li>$in</li>\n<li>$null</li>\n<li>$lt</li>\n<li>$lte</li>\n<li>$btw</li>\n<li>$ilike</li>\n<li>$sw</li>\n<li>$contains</li></ul>","schema":{"type":"array","items":{"type":"string"}}},{"name":"sortBy","required":false,"in":"query","description":"Parameter to sort by.\n      <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>\n      <p>\n             <b>Format: </b> fieldName:DIRECTION\n          </p>\n      <p>\n             <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC\n          </p>\n      <p>\n             <b>Default Value: </b> No default sorting specified, the result order is not guaranteed\n          </p>\n      <h4>Available Fields</h4><ul><li>date</li>\n<li>days</li>\n<li>openedCount</li>\n<li>closedCount</li></ul>\n      ","schema":{"type":"array","items":{"type":"string","enum":["date:ASC","date:DESC","days:ASC","days:DESC","openedCount:ASC","openedCount:DESC","closedCount:ASC","closedCount:DESC"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedDocumented"},{"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/TicketReportEntity"}},"meta":{"properties":{"select":{"type":"array","items":{"type":"string"}},"filter":{"type":"object","properties":{"date":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"days":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"openedCount":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"closedCount":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]}}}}}}}]}}}}},"security":[{"admin":[]}],"tags":["Report"]}},"/ai-chat":{"post":{"operationId":"AiChatController_ask","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AiChatRequestDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AiChatResponseDto"}}}},"403":{"description":""}},"security":[{"user":[]}],"summary":"AI chat bot","tags":["AiChat"]},"delete":{"description":"When you are done, delete your butt","operationId":"AiChatController_deleteSession","parameters":[],"responses":{"403":{"description":""}},"security":[{"user":[]}],"summary":"Delete chat session","tags":["AiChat"]}}},"info":{"title":"CoinHub","description":"CoinHub API docs","version":"1.0.0","contact":{}},"tags":[],"servers":[],"components":{"securitySchemes":{"user":{"scheme":"bearer","bearerFormat":"JWT","type":"http"},"admin":{"scheme":"bearer","bearerFormat":"JWT","type":"http"}},"schemas":{"PaginatedMetaDocumented":{"type":"object","properties":{"itemsPerPage":{"type":"number","title":"Number of items per page"},"totalItems":{"type":"number","title":"Total number of items"},"currentPage":{"type":"number","title":"Current requested page"},"totalPages":{"type":"number","title":"Total number of pages"},"sortBy":{"type":"array","title":"Sorting by columns","items":{"type":"array","items":{"oneOf":[{"type":"string"},{"type":"string","enum":["ASC","DESC"]}]}}},"searchBy":{"title":"Search by fields","type":"array","items":{"type":"string"}},"search":{"type":"string","title":"Search term"},"select":{"title":"List of selected fields","type":"array","items":{"type":"string"}},"filter":{"type":"object","title":"Filters that applied to the query","additionalProperties":false}},"required":["itemsPerPage","totalItems","currentPage","totalPages","filter"]},"PaginatedLinksDocumented":{"type":"object","properties":{"first":{"type":"string","title":"Link to first page"},"previous":{"type":"string","title":"Link to previous page"},"current":{"type":"string","title":"Link to current page"},"next":{"type":"string","title":"Link to next page"},"last":{"type":"string","title":"Link to last page"}}},"PaginatedDocumented":{"type":"object","properties":{"data":{"title":"Array of entities","additionalProperties":false,"type":"array","items":{"type":"object"}},"meta":{"title":"Pagination Metadata","allOf":[{"$ref":"#/components/schemas/PaginatedMetaDocumented"}]},"links":{"title":"Links to pages","allOf":[{"$ref":"#/components/schemas/PaginatedLinksDocumented"}]}},"required":["data","meta","links"]},"UserEntity":{"type":"object","properties":{"id":{"type":"string"},"createdAt":{"format":"date-time","type":"string"},"deletedAt":{"format":"date-time","type":"string","nullable":true,"example":null},"fullname":{"type":"string"},"birthDate":{"format":"date-time","type":"string"},"citizenId":{"type":"string"},"avatar":{"type":"string","nullable":true,"description":"Avatar URL"},"address":{"type":"string","nullable":true}},"required":["id","createdAt","deletedAt","fullname","birthDate","citizenId","avatar","address"]},"AvatarUploadDto":{"type":"object","properties":{"file":{"type":"string","format":"binary"}},"required":["file"]},"CreateUserDto":{"type":"object","properties":{"id":{"type":"string","description":"UUID of the user retreive from supabase","example":"20c75444-798a-4708-9105-69de67e35c1c"},"fullname":{"type":"string"},"birthDate":{"format":"date-time","type":"string","description":"Any string can be initialise by Date class of JS, can be ISO format also","example":"2005-9-27","examples":["2005-9-27","2005-09-26T17:00:00.000Z"]},"citizenId":{"type":"string","description":"Citizen ID with 12 digits","example":"077002455001"},"avatar":{"type":"string","description":"Avatar URL","example":"https://avatars.githubusercontent.com/u/86353526?v=4"},"address":{"type":"string"}},"required":["id","fullname","birthDate","citizenId"]},"UpdateUserDto":{"type":"object","properties":{"fullname":{"type":"string"},"birthDate":{"format":"date-time","type":"string","description":"Any string can be initialise by Date class of JS, can be ISO format also","example":"2005-9-27","examples":["2005-9-27","2005-09-26T17:00:00.000Z"]},"citizenId":{"type":"string","description":"Citizen ID with 12 digits","example":"077002455001"},"avatar":{"type":"string","description":"Avatar URL","example":"https://avatars.githubusercontent.com/u/86353526?v=4"},"address":{"type":"string"}},"required":["fullname","birthDate","citizenId"]},"UpdateParitialUserDto":{"type":"object","properties":{"fullname":{"type":"string"},"birthDate":{"format":"date-time","type":"string","description":"Any string can be initialise by Date class of JS, can be ISO format also","example":"2005-9-27","examples":["2005-9-27","2005-09-26T17:00:00.000Z"]},"citizenId":{"type":"string","description":"Citizen ID with 12 digits","example":"077002455001"},"avatar":{"type":"string","description":"Avatar URL","example":"https://avatars.githubusercontent.com/u/86353526?v=4"},"address":{"type":"string"}}},"SourceEntity":{"type":"object","properties":{"id":{"type":"string"},"balance":{"type":"string"}},"required":["id","balance"]},"TicketHistoryEntity":{"type":"object","properties":{"issuedAt":{"format":"date-time","type":"string"},"maturedAt":{"format":"date-time","type":"string"},"principal":{"type":"string"},"interest":{"type":"string"}},"required":["issuedAt","maturedAt","principal","interest"]},"TicketEntity":{"type":"object","properties":{"id":{"type":"number"},"openedAt":{"format":"date-time","type":"string"},"closedAt":{"format":"date-time","type":"string","nullable":true},"status":{"type":"string","enum":["active","earlyWithdrawn","maturedWithdrawn"]},"method":{"type":"string","enum":["NR","PR","PIR"]},"ticketHistories":{"type":"array","items":{"$ref":"#/components/schemas/TicketHistoryEntity"}}},"required":["id","openedAt","closedAt","status","method","ticketHistories"]},"RegisterDeviceDto":{"type":"object","properties":{"fcmToken":{"type":"string","description":"FCM token retrieve from FCM in client"},"deviceId":{"type":"string","description":"Device ID (taken from else where like \"device info\")"}},"required":["fcmToken","deviceId"]},"DeviceEntity":{"type":"object","properties":{}},"CreateSourceDto":{"type":"object","properties":{"id":{"type":"string"}},"required":["id"]},"CreateTicketDto":{"type":"object","properties":{"sourceId":{"type":"string"},"method":{"type":"string","enum":["NR","PR","PIR"]},"planHistoryId":{"type":"number"},"amount":{"type":"number"}},"required":["sourceId","method","planHistoryId","amount"]},"CreateTopUpDto":{"type":"object","properties":{"provider":{"type":"string","enum":["momo","vnpay","zalopay"]},"returnUrl":{"type":"string","description":"Return URL to client app","example":"coinhub://home"},"amount":{"type":"number","description":"The amount of money","example":100000},"sourceDestinationId":{"type":"string"},"ipAddress":{"type":"string"}},"required":["provider","returnUrl","amount","sourceDestinationId","ipAddress"]},"AvailablePlanView":{"type":"object","properties":{"planHistoryId":{"type":"string"},"rate":{"type":"number"},"planId":{"type":"string"},"days":{"type":"number"}},"required":["planHistoryId","rate","planId","days"]},"PlanEntity":{"type":"object","properties":{"id":{"type":"number"},"days":{"type":"number"}},"required":["id","days"]},"PlanHistoryEntity":{"type":"object","properties":{"id":{"type":"number"},"createdAt":{"format":"date-time","type":"string"},"rate":{"type":"number"}},"required":["id","createdAt","rate"]},"UpdatePlanRateDto":{"type":"object","properties":{"planId":{"type":"number"},"rate":{"type":"number"}},"required":["planId","rate"]},"AdminEntity":{"type":"object","properties":{"username":{"type":"string"}},"required":["username"]},"LoginAdminDto":{"type":"object","properties":{"username":{"type":"string","example":"admin"},"password":{"type":"string","example":"admin"}},"required":["username","password"]},"ActivityReportEntity":{"type":"object","properties":{}},"RevenueReportEntity":{"type":"object","properties":{}},"TicketReportEntity":{"type":"object","properties":{}},"AiChatRequestDto":{"type":"object","properties":{"message":{"type":"string"}},"required":["message"]},"AiChatResponseDto":{"type":"object","properties":{"message":{"type":"object"}},"required":["message"]}}}}